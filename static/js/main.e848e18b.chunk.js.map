{"version":3,"sources":["App.js","components/keycheck.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","analytics","SignIn","className","onClick","provider","GoogleAuthProvider","signInWithPopup","SignOut","currentUser","signOut","ChatRoom","useState","KEYY","setKEYY","locked","setLocked","display","placeholder","setPlaceholder","dummy","useRef","messagesRef","collection","query","orderBy","limit","useCollectionData","idField","messages","formValue","setFormValue","sendMessage","e","a","preventDefault","uid","photoURL","StringCrypto","encryptString","decryptString","console","log","encryptedString","add","text","createdAt","FieldValue","serverTimestamp","current","scrollIntoView","behavior","map","msg","ChatMessage","key","id","message","KEY","ref","onSubmit","value","onChange","target","sha256","type","disabled","props","messageClass","src","App","useAuthState","user","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.e848e18b.chunk.js","sourcesContent":["import React, { useRef, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport StringCrypto from \"string-crypto\";\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/analytics\";\r\nimport { useAuthState } from \"react-firebase-hooks/auth\";\r\nimport { useCollectionData } from \"react-firebase-hooks/firestore\";\r\nimport {hashed_key} from \"./components/keycheck\"\r\nimport sha256 from \"sha256\"\r\nfirebase.initializeApp({\r\n  apiKey: \"AIzaSyABEPMeLah3wCOyKa38gz-oxByUzZllTEg\",\r\n  authDomain: \"chat-encrypt.firebaseapp.com\",\r\n  projectId: \"chat-encrypt\",\r\n  storageBucket: \"chat-encrypt.appspot.com\",\r\n  messagingSenderId: \"813966482173\",\r\n  appId: \"1:813966482173:web:87b975e973257ea95b7c94\",\r\n  measurementId: \"G-ZZEVPRYJJK\",\r\n});\r\nconst auth = firebase.auth();\r\nconst firestore = firebase.firestore();\r\nconst analytics = firebase.analytics();\r\n\r\nfunction App() {\r\n  \r\n  const [user] = useAuthState(auth);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n        <h1>üí¨ The key is \"this-is-the-key\"</h1>\r\n        <SignOut />\r\n      </header>\r\n\r\n      <section>{user ? <ChatRoom /> : <SignIn />}</section>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction SignIn() {\r\n  const signInWithGoogle = () => {\r\n    const provider = new firebase.auth.GoogleAuthProvider();\r\n    auth.signInWithPopup(provider);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <button className=\"sign-in\" onClick={signInWithGoogle}>\r\n        Sign in with Google\r\n      </button>\r\n      <p>\r\n        Do not violate the community guidelines or you will be banned for life!\r\n      </p>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction SignOut() {\r\n  return (\r\n    auth.currentUser && (\r\n      <button className=\"sign-out\" onClick={() => auth.signOut()}>\r\n        Sign Out\r\n      </button>\r\n    )\r\n  );\r\n}\r\n\r\nfunction ChatRoom() {\r\n  const [KEYY, setKEYY] = useState('');\r\n  const [locked, setLocked] = useState(true);\r\n  const [type, setType] = useState(\"file\");\r\n  const [style, setStyle] = useState({ display: \"none\" });\r\n\r\n  const [placeholder, setPlaceholder] = useState(\"enter todays key\");\r\n  const dummy = useRef();\r\n  const messagesRef = firestore.collection(\"messages\");\r\n  const query = messagesRef.orderBy(\"createdAt\").limit(100);\r\n\r\n  const [messages] = useCollectionData(query, { idField: \"id\" });\r\n\r\n  const [formValue, setFormValue] = useState(\"\");\r\n\r\n  const sendMessage = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const { uid, photoURL } = auth.currentUser;\r\n    const { encryptString, decryptString } = new StringCrypto();\r\n    console.log(\"sendingwith this key \"+KEYY)\r\n    let encryptedString = encryptString(formValue, KEYY);\r\n    await messagesRef.add({\r\n      text: encryptedString,\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n      uid,\r\n      photoURL,\r\n    });\r\n\r\n    setFormValue(\"\");\r\n    dummy.current.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n  function EnterKey(e) {\r\n    e.preventDefault();\r\n    if ((sha256(formValue) == hashed_key)&& (locked)) {\r\n      setLocked(false);\r\n      setKEYY(formValue);\r\n      console.log(KEYY + \" changed key\")\r\n      setPlaceholder(\"Write your message\");\r\n    }\r\n    setFormValue(\"\");\r\n  }\r\n\r\n\r\n \r\n\r\n  return (\r\n    <>\r\n      <main>\r\n        {messages &&\r\n          messages.map((msg) => (\r\n            <ChatMessage key={msg.id} message={msg} locked={locked} KEY={KEYY} />\r\n          ))}\r\n\r\n        <span ref={dummy}></span>\r\n      </main>\r\n      <div>\r\n        <form onSubmit={sendMessage}>\r\n          \r\n            <input\r\n              value={formValue}\r\n              onChange={(e) => setFormValue(e.target.value)}\r\n              placeholder={placeholder}\r\n            />\r\n         \r\n\r\n          {locked ? (\r\n            <button onClick={EnterKey}>üîí</button>\r\n          ) : (\r\n            <button type=\"submit\" disabled={!formValue}>\r\n              üïäÔ∏è\r\n            </button>\r\n          )}\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction ChatMessage(props) {\r\n  const { text, uid, photoURL } = props.message;\r\n  const KEY=props.KEY\r\n  console.log(\"inside chatmessage\"+KEY)\r\n\r\n  const messageClass = uid === auth.currentUser.uid ? \"sent\" : \"received\";\r\n  const { encryptString, decryptString } = new StringCrypto();\r\n  return (\r\n    <>\r\n      <div className={`message ${messageClass}`}>\r\n        <img\r\n          src={\r\n            photoURL || \"https://api.adorable.io/avatars/23/abott@adorable.png\"\r\n          }\r\n        />\r\n        {props.locked ? (\r\n          <p>{text}</p>\r\n        ) : (\r\n          <p>{decryptString(text, KEY)}</p>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nexport const hashed_key=\"02ea0328dd9220c6ebddb45b2ee7f957954714132e5fa22fa8007850de92b0b4\";\r\nconst KEYCHECK = props => <h1>Home</h1>;\r\nexport default KEYCHECK;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}